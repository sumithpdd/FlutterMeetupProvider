Demo
----
Create an app with 
1. flutter create todo_flutter
2. cd .\todo_flutter\
3. code .
This is a working version of the layout.
So just show how its layed out and built

main.dart -> is a Materialapp -> TasksScreen

In the 'screens' folder -> TasksScreen which is a stateless widget
it returns a Scaffold -> notice CircleAvatar -> also notice color: Theme.of(context).accentColor
Notice the other container => boxDecoration and we enclosed he container in an Expanded widget to take it all the avilable spacce

'widgets' folder - Task List and Task Tile -> widgets from existing widgets List View and ListTile

Look at the FloatingActionButton thats has the add buttton -> showModalBottomSheet

In the AddTaskScreen we can see textfield, Addbutton and the BoxDecoration for container
///////////////////////////////////////

4. Flutter run


/////////////
StateManagement

TaskCheckBox as StatefulWidget as it has to react to user input and change its state. -> Local State

lass TaskCheckBox extends StatefulWidget {
  @override
  _TaskCheckBoxState createState() => _TaskCheckBoxState();
}

class _TaskCheckBoxState extends State<TaskCheckBox> {
  bool isChecked;
  @override
  Widget build(BuildContext context) {
    return Checkbox(
      activeColor: Theme.of(context).accentColor,
      value: isChecked,
      onChanged: (bool newValue) {
        setState(() {
           isChecked = newValue;       
        });
      },
    );
  }

but we need to manage it through out the app ->


Now we make the app more dynamic,
'models' Folder
use ListView.builder as its performant and can expand on demand.
Check the checkboxCallback ->  //Callback

AddTaskScreen -> Adding tasks to the list
Moving the state up so now the tasks is moved to tasks_screen
Add a new callback
//////////////////////


The Problem.
Lots of StatefulWidget, moving data back up the tree, rebuild happens all the time, and unnecessary callbacks
/////////////////////
Use Provider package
In the TasksScreen Listen to the changes
In the TasksList widget listen to the changes

Use ChangeNotifier Provider

1. https://pub.dev/ search for provider
dependencies:
  provider: ^3.2.0

Update pubspec.yaml
2. Create a new file task_data.dart in models folder
TaskData class should extend ChangeNotifier
import task.dart
and bring the code that creates tasks from tasks_screen

3. in main.dart wrap Materialapp with ChangeNotifierProvider
add the builder: (context) => TaskData(),
	ignore the warning
4. Fix task_screen where there is reference to tasks
CLUE : Provider.of<TaskData>(context).tasks
and comment // tasks.add(Task(name: newTaskTitle));
5. Fix TasksList that points to tasks_list screen - use provider , no need to pass task in constructor
CLUE instead of widget use Provider.of<TaskData>(context).tasks

Both TasksScreen and TaskList doesnot need to be stateful now, convert it to stateless
comment out setstate calls in both will fix later
for eg. in checkboxCallback 
  // setState(() {
  //   Provider.of<TaskData>(context).tasks[index].toggleDone();
  // });

Run to check it works
//////////////////

Reafactor to use Consumer
1. Best place is tasks_screen wrap ListView with consumer.
   Consumer<TaskData>(
      builder: (context, taskData, child) {
        ListView.builder(......
		
2. Improve repetitive code. like length
modify TaskData to hold a getter for taskcount
int get taskCount {
    return _tasks.length;
}
/////////////////
Lets Make AddTask work -
1. in the add_task_screen , remove the callback and use provider
eg.
 onPressed: () { 
                Provider.of<TaskData>(context).addTask(newTaskTitle);
                Navigator.pop(context);}
and
use notifyListeners for UI to get the updates 

 void addTask(String newTaskTitle) {
    final task = Task(name: newTaskTitle);
    _tasks.add(task);
    notifyListeners();
  }

Note: reason we are using _tasks private property is to make sure methods are used to update or get tasks.





